fatal() {
  remainder=${*:2}
  if [ -z "$remainder" ]; then
    log "ðŸ›‘" ${@}
  else
    log ${@}
  fi
  exit 1
}

wrap() {
  cols=$(tput cols)
  echo "${*}" | fold -w ${cols} -s
}

log() {
  emoji=$1
  remainder=${*:2}

  if [ -z "${NO_EMOJI}" ]; then
    wrap "[ ${0} ] ${*}"
  else
    if [ -z "$remainder" ]; then
      wrap "[ ${0} ] ${*}"
    else
      wrap "[ ${0} ] ${remainder}"
    fi
  fi
}

usage() {
  echo "usage: ${0} [-h] ${extra_usage}"
  if [ ! -z "$1" ]; then
    echo
    echo "DESCRIPTION"
    echo "    ${description}"
  fi
  exit 0
}

usage_on_help() {
  description=$1
  extra_usage=$2
  cli_args=${@:3}

  for arg in ${cli_args}; do
    if [ ${arg} = "-h" ] || [ ${arg} = "--help" ]; then
      usage $description
    fi
  done
}

# Read user input into the variable 'INPUT'
#
# Args:
#
# [1] - an emoji to use for messages
# [2] - the message explaining what input is being requested
# [3] - a default value to use if no value is provided
#
# Respects NO_EMOJI when outputing messages to the user
user_input() {
  emoji=$1
  message=$2
  default=$3
  prompt=$4

  if [ -z "$message" ]; then
    echo "user_input requires a message"
    exit 1
  fi

  INPUT=

  if [ -z "${prompt}" ]; then
    prompt=$(log "${emoji}" "Value: ")
    if [ ! -z "${default}" ]; then
      prompt=$(log "${emoji}" "Value (or hit return to use '${default}'): ")
    fi
  fi

  while [ -z "${INPUT}" ]; do

    log "$emoji" "$message"
    read -p "${prompt}" INPUT
    if [ -z "$INPUT" ]; then
      INPUT=$default
    fi
    if [ -z "$INPUT" ]; then
      log "ðŸ˜¶", "You must provide a value"
    fi
  done
}

user_confirm() {
  user_input "$1" "$2" "$3" "y/n> "
}

require_not_exist() {
  file=$1
  message=$2
  if [ -e ${file} ]; then
    fatal "$message"
  fi
}
require_exist() {
  file=$1
  message=$2
  if [ ! -e ${file} ]; then
    fatal "$message"
  fi
}
# vim: ft=bash
